// File: feeCalculator.hla
// Stewart Dulaney
// The purpose of this program is to calculate student enrollment fees
// Input: single 8-bit value with format prsseeee
// Output: message displaying data extracted from input and total fees

program feeCalculator;
#include( "stdlib.hhf" );
static
	iInput : byte;
	iTemporary : int8;
	iEnrollmentFees : int32 := 0;
	iParkingCost : int32 := 0;
	iPricePerUnit : int32 := 0;


begin feeCalculator;

	stdout.put( "Feed me(2 hex digits with the bits prsseeee): ");
	stdin.get( iInput );

	// Extract semester
	mov( iInput, AL );
	and( %0011_0000, AL );
	shr( 4, AL );
	mov( 0, iTemporary );
	cmp( AL, iTemporary );
	je FallSemester;
	mov( 1, iTemporary );
	cmp( AL, iTemporary );
	je WinterSemester;
	mov( 2, iTemporary );
	cmp( AL, iTemporary );
	je SpringSemester;
	mov( 3, iTemporary );
	cmp( AL, iTemporary );
	je SummerSemester;

	FallSemester:
		stdout.put( "Fall Semester", nl );
		add( 51, iEnrollmentFees );
		add( 85, iParkingCost );
		jmp SemesterDone;
	WinterSemester:
		stdout.put( "Winter Semester", nl );
		add( 48, iEnrollmentFees );
		add( 45, iParkingCost );
		jmp SemesterDone;
	SpringSemester:
		stdout.put( "Spring Semester", nl );
		add( 51, iEnrollmentFees );
		add( 85, iParkingCost );
		jmp SemesterDone;
	SummerSemester:
		stdout.put( "Summer Semester", nl );
		add( 48, iEnrollmentFees );
		add( 45, iParkingCost );
	SemesterDone:

	// Extract enrolled units
	mov( iInput, AL );
	and( %0000_1111, AL );
	stdout.puti8( AL );
	stdout.put( " unit" );
	mov( 1, iTemporary );
	cmp( AL, iTemporary );
	je OnlyOneUnit;
	stdout.put( "s", nl );
	jmp MultipleUnits;
	OnlyOneUnit:
		stdout.put( nl );
	MultipleUnits:

	// Extract CA resident?
	mov( iInput, AL );
	and( %0100_0000, AL );
	shr( 6, AL );
	mov( 1, iTemporary );
	cmp( AL, iTemporary );
	je CaliforniaRes;
	cmp( AL, iTemporary );
	jne NonRes;

	CaliforniaRes:
		add( 46, iPricePerUnit );
		stdout.put( "CA Resident", nl );
		jmp DoneRes;
	NonRes:
		add( 335, iPricePerUnit );
		stdout.put( "Non-Resident", nl );
	DoneRes:

	// Extract parking decal?
	mov( iInput, AL );
	and( %1000_0000, AL );
	shr( 7, AL );
	mov( 1, iTemporary );
	cmp( AL, iTemporary );
	je YesParking;
	cmp( AL, iTemporary );
	jne NoParking;

	YesParking:
		stdout.put( "Parking", nl );
		mov( iParkingCost, EAX );
		add( EAX, iEnrollmentFees );
		jmp ParkingDone;
	NoParking:
		stdout.put( "No Parking", nl );
	ParkingDone:

	// Add (number enrolled units * cost) to total fees
	mov( iInput, AL );
	and( %0000_1111, AL );

	WhileLp:
	WhileLpTermination:
		cmp( AL, 0 );
		je WhileLpDone;
	WhileLpBody:
		dec( AL );
		mov( iPricePerUnit, EBX );
		add( EBX, iEnrollmentFees );
		jmp WhileLp;
     	WhileLpDone:

	stdout.put( "Total Fees = $ ", iEnrollmentFees, nl );

end feeCalculator;
